{:libpod/kube {:KubeApplyLibpod {:summary "Apply a podman workload or Kubernetes YAML file.", :method :post, :path "/libpod/kube/apply", :params ({:name "caCertFile", :in :query} {:name "kubeConfig", :in :query} {:name "namespace", :in :query} {:name "service", :in :query} {:name "file", :in :query}), :request-body true}}, :libpod/system {:SystemDataUsageLibpod {:summary "Show disk usage", :method :get, :path "/libpod/system/df", :params ()}, :SystemPruneLibpod {:summary "Prune unused data", :method :post, :path "/libpod/system/prune", :params ()}}, :system {:SystemDataUsage {:summary "Show disk usage", :method :get, :path "/system/df", :params ()}}, :libpod/exec {:ExecInspectLibpod {:summary "Inspect an exec instance", :method :get, :path "/libpod/exec/{id}/json", :params ({:name "id", :in :path})}, :ExecResizeLibpod {:summary "Resize an exec instance", :method :post, :path "/libpod/exec/{id}/resize", :params ({:name "id", :in :path} {:name "h", :in :query} {:name "w", :in :query})}, :ExecStartLibpod {:summary "Start an exec instance", :method :post, :path "/libpod/exec/{id}/start", :params ({:name "id", :in :path}), :request-body true}}, :exec {:ExecInspect {:summary "Inspect an exec instance", :method :get, :path "/exec/{id}/json", :params ({:name "id", :in :path})}, :ExecResize {:summary "Resize an exec instance", :method :post, :path "/exec/{id}/resize", :params ({:name "id", :in :path} {:name "h", :in :query} {:name "w", :in :query} {:name "running", :in :query})}, :ExecStart {:summary "Start an exec instance", :method :post, :path "/exec/{id}/start", :params ({:name "id", :in :path}), :request-body true}}, :images {:ImageList {:summary "List Images", :method :get, :path "/images/json", :params ({:name "all", :in :query} {:name "filters", :in :query} {:name "digests", :in :query})}, :ImageLoad {:summary "Import image", :method :post, :path "/images/load", :params ({:name "quiet", :in :query}), :request-body true}, :ImagePrune {:summary "Prune unused images", :method :post, :path "/images/prune", :params ({:name "filters", :in :query})}, :ImagePush {:summary "Push Image", :method :post, :path "/images/{name}/push", :params ({:name "name", :in :path} {:name "tag", :in :query} {:name "all", :in :query} {:name "compress", :in :query} {:name "destination", :in :query} {:name "X-Registry-Auth", :in :header})}, :ImageHistory {:summary "History of an image", :method :get, :path "/images/{name}/history", :params ({:name "name", :in :path})}, :ImageDelete {:summary "Remove Image", :method :delete, :path "/images/{name}", :params ({:name "name", :in :path} {:name "force", :in :query} {:name "noprune", :in :query})}, :ImageCreate {:summary "Create an image", :method :post, :path "/images/create", :params ({:name "X-Registry-Auth", :in :header} {:name "fromImage", :in :query} {:name "fromSrc", :in :query} {:name "repo", :in :query} {:name "tag", :in :query} {:name "message", :in :query} {:name "platform", :in :query}), :request-body true}, :ImageGet {:summary "Export an image", :method :get, :path "/images/{name}/get", :params ({:name "name", :in :path})}, :ImageTag {:summary "Tag an image", :method :post, :path "/images/{name}/tag", :params ({:name "name", :in :path} {:name "repo", :in :query} {:name "tag", :in :query})}, :ImageSearch {:summary "Search images", :method :get, :path "/images/search", :params ({:name "term", :in :query} {:name "limit", :in :query} {:name "filters", :in :query} {:name "tlsVerify", :in :query} {:name "listTags", :in :query})}, :ImageInspect {:summary "Inspect an image", :method :get, :path "/images/{name}/json", :params ({:name "name", :in :path})}, :ImageGetAll {:summary "Export several images", :method :get, :path "/images/get", :params ({:name "names", :in :query})}}, :libpod/secrets {:SecretDeleteLibpod {:summary "Remove secret", :method :delete, :path "/libpod/secrets/{name}", :params ({:name "name", :in :path} {:name "all", :in :query})}, :SecretExistsLibpod {:summary "Secret exists", :method :get, :path "/libpod/secrets/{name}/exists", :params ({:name "name", :in :path})}, :SecretInspectLibpod {:summary "Inspect secret", :method :get, :path "/libpod/secrets/{name}/json", :params ({:name "name", :in :path})}, :SecretCreateLibpod {:summary "Create a secret", :method :post, :path "/libpod/secrets/create", :params ({:name "name", :in :query} {:name "driver", :in :query} {:name "driveropts", :in :query} {:name "labels", :in :query}), :request-body true}, :SecretListLibpod {:summary "List secrets", :method :get, :path "/libpod/secrets/json", :params ({:name "filters", :in :query})}}, :libpod/images {:ImageDeleteLibpod {:summary "Remove an image from the local storage.", :method :delete, :path "/libpod/images/{name}", :params ({:name "name", :in :path} {:name "force", :in :query})}, :ImagePushLibpod {:summary "Push Image", :method :post, :path "/libpod/images/{name}/push", :params ({:name "name", :in :path} {:name "destination", :in :query} {:name "tlsVerify", :in :query} {:name "quiet", :in :query} {:name "X-Registry-Auth", :in :header})}, :ImageExportLibpod {:summary "Export multiple images", :method :get, :path "/libpod/images/export", :params ({:name "format", :in :query} {:name "references", :in :query} {:name "compress", :in :query} {:name "ociAcceptUncompressedLayers", :in :query})}, :ImageHistoryLibpod {:summary "History of an image", :method :get, :path "/libpod/images/{name}/history", :params ({:name "name", :in :path})}, :ImageDeleteAllLibpod {:summary "Remove one or more images from the storage.", :method :delete, :path "/libpod/images/remove", :params ({:name "images", :in :query} {:name "all", :in :query} {:name "force", :in :query} {:name "ignore", :in :query} {:name "lookupManifest", :in :query})}, :ImageScpLibpod {:summary "Copy an image from one host to another", :method :post, :path "/libpod/images/scp/{name}", :params ({:name "name", :in :path} {:name "destination", :in :query} {:name "quiet", :in :query})}, :ImageInspectLibpod {:summary "Inspect an image", :method :get, :path "/libpod/images/{name}/json", :params ({:name "name", :in :path})}, :ImageGetLibpod {:summary "Export an image", :method :get, :path "/libpod/images/{name}/get", :params ({:name "name", :in :path} {:name "format", :in :query} {:name "compress", :in :query})}, :ImageUntagLibpod {:summary "Untag an image", :method :post, :path "/libpod/images/{name}/untag", :params ({:name "name", :in :path} {:name "repo", :in :query} {:name "tag", :in :query})}, :ImageTagLibpod {:summary "Tag an image", :method :post, :path "/libpod/images/{name}/tag", :params ({:name "name", :in :path} {:name "repo", :in :query} {:name "tag", :in :query})}, :ImageChangesLibpod {:summary "Report on changes to images's filesystem; adds, deletes or modifications.", :method :get, :path "/libpod/images/{name}/changes", :params ({:name "name", :in :path} {:name "parent", :in :query} {:name "diffType", :in :query})}, :ImageListLibpod {:summary "List Images", :method :get, :path "/libpod/images/json", :params ({:name "all", :in :query} {:name "filters", :in :query})}, :ImageLoadLibpod {:summary "Load image", :method :post, :path "/libpod/images/load", :params (), :request-body true}, :ImageTreeLibpod {:summary "Image tree", :method :get, :path "/libpod/images/{name}/tree", :params ({:name "name", :in :path} {:name "whatrequires", :in :query})}, :ImagePruneLibpod {:summary "Prune unused images", :method :post, :path "/libpod/images/prune", :params ({:name "all", :in :query} {:name "external", :in :query} {:name "filters", :in :query})}, :ImageSearchLibpod {:summary "Search images", :method :get, :path "/libpod/images/search", :params ({:name "term", :in :query} {:name "limit", :in :query} {:name "filters", :in :query} {:name "tlsVerify", :in :query} {:name "listTags", :in :query})}, :ImageImportLibpod {:summary "Import image", :method :post, :path "/libpod/images/import", :params ({:name "Content-Type", :in :header} {:name "changes", :in :query} {:name "message", :in :query} {:name "reference", :in :query} {:name "url", :in :query}), :request-body true}, :ImageExistsLibpod {:summary "Image exists", :method :get, :path "/libpod/images/{name}/exists", :params ({:name "name", :in :path})}, :ImagePullLibpod {:summary "Pull images", :method :post, :path "/libpod/images/pull", :params ({:name "reference", :in :query} {:name "quiet", :in :query} {:name "Arch", :in :query} {:name "OS", :in :query} {:name "Variant", :in :query} {:name "policy", :in :query} {:name "tlsVerify", :in :query} {:name "allTags", :in :query} {:name "X-Registry-Auth", :in :header})}}, :secrets {:SecretList {:summary "List secrets", :method :get, :path "/secrets", :params ({:name "filters", :in :query})}, :SecretInspect {:summary "Inspect secret", :method :get, :path "/secrets/{name}", :params ({:name "name", :in :path})}, :SecretDelete {:summary "Remove secret", :method :delete, :path "/secrets/{name}", :params ({:name "name", :in :path})}, :SecretCreate {:summary "Create a secret", :method :post, :path "/secrets/create", :params (), :request-body true}}, :events {:SystemEvents {:summary "Get events", :method :get, :path "/events", :params ({:name "since", :in :query} {:name "until", :in :query} {:name "filters", :in :query})}}, :libpod/events {:SystemEventsLibpod {:summary "Get events", :method :get, :path "/libpod/events", :params ({:name "since", :in :query} {:name "until", :in :query} {:name "filters", :in :query} {:name "stream", :in :query})}}, :libpod/_ping {:SystemPing {:summary "Ping service", :method :get, :path "/libpod/_ping", :params ()}}, :libpod/generate {:GenerateSystemdLibpod {:summary "Generate Systemd Units", :method :get, :path "/libpod/generate/{name}/systemd", :params ({:name "name", :in :path} {:name "useName", :in :query} {:name "new", :in :query} {:name "noHeader", :in :query} {:name "startTimeout", :in :query} {:name "stopTimeout", :in :query} {:name "restartPolicy", :in :query} {:name "containerPrefix", :in :query} {:name "podPrefix", :in :query} {:name "separator", :in :query} {:name "restartSec", :in :query} {:name "wants", :in :query} {:name "after", :in :query} {:name "requires", :in :query} {:name "additionalEnvVariables", :in :query})}, :GenerateKubeLibpod {:summary "Generate a Kubernetes YAML file.", :method :get, :path "/libpod/generate/kube", :params ({:name "names", :in :query} {:name "service", :in :query} {:name "type", :in :query} {:name "replicas", :in :query})}}, :libpod/manifests {:ManifestCreateLibpod {:summary "Create", :method :post, :path "/libpod/manifests", :params ({:name "name", :in :query} {:name "images", :in :query} {:name "all", :in :query} {:name "amend", :in :query}), :request-body true}, :ManifestModifyLibpod {:summary "Modify manifest list", :method :put, :path "/libpod/manifests/{name}", :params ({:name "name", :in :path} {:name "tlsVerify", :in :query}), :request-body true}, :ManifestDeleteLibpod {:summary "Delete manifest list", :method :delete, :path "/libpod/manifests/{name}", :params ({:name "name", :in :path})}, :ManifestAddLibpod {:summary "Add image", :method :post, :path "/libpod/manifests/{name}/add", :params ({:name "name", :in :path}), :request-body true}, :ManifestExistsLibpod {:summary "Exists", :method :get, :path "/libpod/manifests/{name}/exists", :params ({:name "name", :in :path})}, :ManifestInspectLibpod {:summary "Inspect", :method :get, :path "/libpod/manifests/{name}/json", :params ({:name "name", :in :path} {:name "tlsVerify", :in :query})}, :ManifestPushV3Libpod {:summary "Push manifest to registry", :method :post, :path "/libpod/manifests/{name}/push", :params ({:name "name", :in :path} {:name "destination", :in :query} {:name "all", :in :query})}, :ManifestPushLibpod {:summary "Push manifest list to registry", :method :post, :path "/libpod/manifests/{name}/registry/{destination}", :params ({:name "name", :in :path} {:name "destination", :in :path} {:name "all", :in :query} {:name "tlsVerify", :in :query} {:name "quiet", :in :query})}}, :containers {:ContainerAttach {:summary "Attach to a container", :method :post, :path "/containers/{name}/attach", :params ({:name "name", :in :path} {:name "detachKeys", :in :query} {:name "logs", :in :query} {:name "stream", :in :query} {:name "stdout", :in :query} {:name "stderr", :in :query} {:name "stdin", :in :query})}, :ContainerPrune {:summary "Delete stopped containers", :method :post, :path "/containers/prune", :params ({:name "filters", :in :query})}, :ContainerResize {:summary "Resize a container's TTY", :method :post, :path "/containers/{name}/resize", :params ({:name "name", :in :path} {:name "h", :in :query} {:name "w", :in :query} {:name "running", :in :query})}, :ContainerStart {:summary "Start a container", :method :post, :path "/containers/{name}/start", :params ({:name "name", :in :path} {:name "detachKeys", :in :query})}, :ContainerExport {:summary "Export a container", :method :get, :path "/containers/{name}/export", :params ({:name "name", :in :path})}, :ContainerRename {:summary "Rename an existing container", :method :post, :path "/containers/{name}/rename", :params ({:name "name", :in :path} {:name "name", :in :query})}, :ContainerStats {:summary "Get stats for a container", :method :get, :path "/containers/{name}/stats", :params ({:name "name", :in :path} {:name "stream", :in :query} {:name "one-shot", :in :query})}, :ContainerExec {:summary "Create an exec instance", :method :post, :path "/containers/{name}/exec", :params ({:name "name", :in :path}), :request-body true}, :ContainerRestart {:summary "Restart container", :method :post, :path "/containers/{name}/restart", :params ({:name "name", :in :path} {:name "t", :in :query})}, :ContainerArchive {:summary "Get files from a container", :method :get, :path "/containers/{name}/archive", :params ({:name "name", :in :path} {:name "path", :in :query})}, :ContainerCreate {:summary "Create a container", :method :post, :path "/containers/create", :params ({:name "name", :in :query}), :request-body true}, :ContainerPause {:summary "Pause container", :method :post, :path "/containers/{name}/pause", :params ({:name "name", :in :path})}, :ContainerKill {:summary "Kill container", :method :post, :path "/containers/{name}/kill", :params ({:name "name", :in :path} {:name "all", :in :query} {:name "signal", :in :query})}, :ContainerLogs {:summary "Get container logs", :method :get, :path "/containers/{name}/logs", :params ({:name "name", :in :path} {:name "follow", :in :query} {:name "stdout", :in :query} {:name "stderr", :in :query} {:name "since", :in :query} {:name "until", :in :query} {:name "timestamps", :in :query} {:name "tail", :in :query})}, :ContainerUnpause {:summary "Unpause container", :method :post, :path "/containers/{name}/unpause", :params ({:name "name", :in :path})}, :ContainerWait {:summary "Wait on a container", :method :post, :path "/containers/{name}/wait", :params ({:name "name", :in :path} {:name "condition", :in :query} {:name "interval", :in :query})}, :ContainerStop {:summary "Stop a container", :method :post, :path "/containers/{name}/stop", :params ({:name "name", :in :path} {:name "t", :in :query})}, :ContainerTop {:summary "List processes running inside a container", :method :get, :path "/containers/{name}/top", :params ({:name "name", :in :path} {:name "ps_args", :in :query})}, :PutContainerArchive {:summary "Put files into a container", :method :put, :path "/containers/{name}/archive", :params ({:name "name", :in :path} {:name "path", :in :query} {:name "noOverwriteDirNonDir", :in :query} {:name "copyUIDGID", :in :query}), :request-body true}, :ContainerInspect {:summary "Inspect container", :method :get, :path "/containers/{name}/json", :params ({:name "name", :in :path} {:name "size", :in :query})}, :ContainerDelete {:summary "Remove a container", :method :delete, :path "/containers/{name}", :params ({:name "name", :in :path} {:name "force", :in :query} {:name "v", :in :query} {:name "link", :in :query})}, :ContainerList {:summary "List containers", :method :get, :path "/containers/json", :params ({:name "all", :in :query} {:name "external", :in :query} {:name "limit", :in :query} {:name "size", :in :query} {:name "filters", :in :query})}}, :libpod/containers {:ContainerUnmountLibpod {:summary "Unmount a container", :method :post, :path "/libpod/containers/{name}/unmount", :params ({:name "name", :in :path})}, :ContainerHealthcheckLibpod {:summary "Run a container's healthcheck", :method :get, :path "/libpod/containers/{name}/healthcheck", :params ({:name "name", :in :path})}, :ContainerRestartLibpod {:summary "Restart a container", :method :post, :path "/libpod/containers/{name}/restart", :params ({:name "name", :in :path} {:name "t", :in :query})}, :ContainerExistsLibpod {:summary "Check if container exists", :method :get, :path "/libpod/containers/{name}/exists", :params ({:name "name", :in :path})}, :PutContainerArchiveLibpod {:summary "Copy files into a container", :method :put, :path "/libpod/containers/{name}/archive", :params ({:name "name", :in :path} {:name "path", :in :query} {:name "pause", :in :query}), :request-body true}, :ContainerStatsLibpod {:summary "Get stats for a container", :method :get, :path "/libpod/containers/{name}/stats", :params ({:name "name", :in :path} {:name "stream", :in :query})}, :ContainerDeleteLibpod {:summary "Delete container", :method :delete, :path "/libpod/containers/{name}", :params ({:name "name", :in :path} {:name "depend", :in :query} {:name "force", :in :query} {:name "ignore", :in :query} {:name "timeout", :in :query} {:name "v", :in :query})}, :ContainerWaitLibpod {:summary "Wait on a container", :method :post, :path "/libpod/containers/{name}/wait", :params ({:name "name", :in :path} {:name "condition", :in :query} {:name "interval", :in :query})}, :ContainerRenameLibpod {:summary "Rename an existing container", :method :post, :path "/libpod/containers/{name}/rename", :params ({:name "name", :in :path} {:name "name", :in :query})}, :ContainerExportLibpod {:summary "Export a container", :method :get, :path "/libpod/containers/{name}/export", :params ({:name "name", :in :path})}, :ContainerInspectLibpod {:summary "Inspect container", :method :get, :path "/libpod/containers/{name}/json", :params ({:name "name", :in :path} {:name "size", :in :query})}, :ContainerCheckpointLibpod {:summary "Checkpoint a container", :method :post, :path "/libpod/containers/{name}/checkpoint", :params ({:name "name", :in :path} {:name "keep", :in :query} {:name "leaveRunning", :in :query} {:name "tcpEstablished", :in :query} {:name "export", :in :query} {:name "ignoreRootFS", :in :query} {:name "ignoreVolumes", :in :query} {:name "preCheckpoint", :in :query} {:name "withPrevious", :in :query} {:name "fileLocks", :in :query} {:name "printStats", :in :query})}, :ContainerStartLibpod {:summary "Start a container", :method :post, :path "/libpod/containers/{name}/start", :params ({:name "name", :in :path} {:name "detachKeys", :in :query})}, :ContainerExecLibpod {:summary "Create an exec instance", :method :post, :path "/libpod/containers/{name}/exec", :params ({:name "name", :in :path}), :request-body true}, :ContainerStopLibpod {:summary "Stop a container", :method :post, :path "/libpod/containers/{name}/stop", :params ({:name "name", :in :path} {:name "timeout", :in :query} {:name "Ignore", :in :query})}, :ContainerUpdateLibpod {:summary "Update an existing containers cgroup configuration", :method :post, :path "/libpod/containers/{name}/update", :params ({:name "name", :in :path}), :request-body true}, :ContainerTopLibpod {:summary "List processes", :method :get, :path "/libpod/containers/{name}/top", :params ({:name "name", :in :path} {:name "stream", :in :query} {:name "delay", :in :query} {:name "ps_args", :in :query})}, :ContainerInitLibpod {:summary "Initialize a container", :method :post, :path "/libpod/containers/{name}/init", :params ({:name "name", :in :path})}, :ContainerMountLibpod {:summary "Mount a container", :method :post, :path "/libpod/containers/{name}/mount", :params ({:name "name", :in :path})}, :ContainerPruneLibpod {:summary "Delete stopped containers", :method :post, :path "/libpod/containers/prune", :params ({:name "filters", :in :query})}, :ContainerLogsLibpod {:summary "Get container logs", :method :get, :path "/libpod/containers/{name}/logs", :params ({:name "name", :in :path} {:name "follow", :in :query} {:name "stdout", :in :query} {:name "stderr", :in :query} {:name "since", :in :query} {:name "until", :in :query} {:name "timestamps", :in :query} {:name "tail", :in :query})}, :ContainerArchiveLibpod {:summary "Copy files from a container", :method :get, :path "/libpod/containers/{name}/archive", :params ({:name "name", :in :path} {:name "path", :in :query} {:name "rename", :in :query})}, :ContainerListLibpod {:summary "List containers", :method :get, :path "/libpod/containers/json", :params ({:name "all", :in :query} {:name "limit", :in :query} {:name "namespace", :in :query} {:name "pod", :in :query} {:name "size", :in :query} {:name "sync", :in :query} {:name "filters", :in :query})}, :ContainerChangesLibpod {:summary "Report on changes to container's filesystem; adds, deletes or modifications.", :method :get, :path "/libpod/containers/{name}/changes", :params ({:name "name", :in :path} {:name "parent", :in :query} {:name "diffType", :in :query})}, :ContainersStatsAllLibpod {:summary "Get stats for one or more containers", :method :get, :path "/libpod/containers/stats", :params ({:name "containers", :in :query} {:name "stream", :in :query} {:name "interval", :in :query})}, :ContainerShowMountedLibpod {:summary "Show mounted containers", :method :get, :path "/libpod/containers/showmounted", :params ()}, :ContainerUnpauseLibpod {:summary "Unpause Container", :method :post, :path "/libpod/containers/{name}/unpause", :params ({:name "name", :in :path})}, :ContainerCreateLibpod {:summary "Create a container", :method :post, :path "/libpod/containers/create", :params (), :request-body true}, :ContainerAttachLibpod {:summary "Attach to a container", :method :post, :path "/libpod/containers/{name}/attach", :params ({:name "name", :in :path} {:name "detachKeys", :in :query} {:name "logs", :in :query} {:name "stream", :in :query} {:name "stdout", :in :query} {:name "stderr", :in :query} {:name "stdin", :in :query})}, :ContainerRestoreLibpod {:summary "Restore a container", :method :post, :path "/libpod/containers/{name}/restore", :params ({:name "name", :in :path} {:name "name", :in :query} {:name "keep", :in :query} {:name "tcpEstablished", :in :query} {:name "import", :in :query} {:name "ignoreRootFS", :in :query} {:name "ignoreVolumes", :in :query} {:name "ignoreStaticIP", :in :query} {:name "ignoreStaticMAC", :in :query} {:name "fileLocks", :in :query} {:name "printStats", :in :query} {:name "pod", :in :query})}, :ContainerKillLibpod {:summary "Kill container", :method :post, :path "/libpod/containers/{name}/kill", :params ({:name "name", :in :path} {:name "signal", :in :query})}, :ContainerPauseLibpod {:summary "Pause a container", :method :post, :path "/libpod/containers/{name}/pause", :params ({:name "name", :in :path})}, :ContainerResizeLibpod {:summary "Resize a container's TTY", :method :post, :path "/libpod/containers/{name}/resize", :params ({:name "name", :in :path} {:name "h", :in :query} {:name "w", :in :query})}}, :auth {:SystemAuth {:summary "Check auth configuration", :method :post, :path "/auth", :params (), :request-body true}}, :volumes {:VolumeList {:summary "List volumes", :method :get, :path "/volumes", :params ({:name "filters", :in :query})}, :VolumeInspect {:summary "Inspect volume", :method :get, :path "/volumes/{name}", :params ({:name "name", :in :path})}, :VolumeDelete {:summary "Remove volume", :method :delete, :path "/volumes/{name}", :params ({:name "name", :in :path} {:name "force", :in :query})}, :VolumeCreate {:summary "Create a volume", :method :post, :path "/volumes/create", :params (), :request-body true}, :VolumePrune {:summary "Prune volumes", :method :post, :path "/volumes/prune", :params ({:name "filters", :in :query})}}, :libpod/volumes {:VolumeDeleteLibpod {:summary "Remove volume", :method :delete, :path "/libpod/volumes/{name}", :params ({:name "name", :in :path} {:name "force", :in :query})}, :VolumeExistsLibpod {:summary "Volume exists", :method :get, :path "/libpod/volumes/{name}/exists", :params ({:name "name", :in :path})}, :VolumeInspectLibpod {:summary "Inspect volume", :method :get, :path "/libpod/volumes/{name}/json", :params ({:name "name", :in :path})}, :VolumeCreateLibpod {:summary "Create a volume", :method :post, :path "/libpod/volumes/create", :params (), :request-body true}, :VolumeListLibpod {:summary "List volumes", :method :get, :path "/libpod/volumes/json", :params ({:name "filters", :in :query})}, :VolumePruneLibpod {:summary "Prune volumes", :method :post, :path "/libpod/volumes/prune", :params ({:name "filters", :in :query})}}, :libpod/networks {:NetworkPruneLibpod {:summary "Delete unused networks", :method :post, :path "/libpod/networks/prune", :params ({:name "filters", :in :query})}, :NetworkDisconnectLibpod {:summary "Disconnect container from network", :method :post, :path "/libpod/networks/{name}/disconnect", :params ({:name "name", :in :path}), :request-body true}, :NetworkExistsLibpod {:summary "Network exists", :method :get, :path "/libpod/networks/{name}/exists", :params ({:name "name", :in :path})}, :NetworkListLibpod {:summary "List networks", :method :get, :path "/libpod/networks/json", :params ({:name "filters", :in :query})}, :NetworkCreateLibpod {:summary "Create network", :method :post, :path "/libpod/networks/create", :params (), :request-body true}, :NetworkInspectLibpod {:summary "Inspect a network", :method :get, :path "/libpod/networks/{name}/json", :params ({:name "name", :in :path})}, :NetworkDeleteLibpod {:summary "Remove a network", :method :delete, :path "/libpod/networks/{name}", :params ({:name "name", :in :path} {:name "force", :in :query})}, :NetworkUpdateLibpod {:summary "Update existing podman network", :method :post, :path "/libpod/networks/{name}/update", :params ({:name "name", :in :path}), :request-body true}, :NetworkConnectLibpod {:summary "Connect container to network", :method :post, :path "/libpod/networks/{name}/connect", :params ({:name "name", :in :path}), :request-body true}}, :networks {:NetworkList {:summary "List networks", :method :get, :path "/networks", :params ({:name "filters", :in :query})}, :NetworkInspect {:summary "Inspect a network", :method :get, :path "/networks/{name}", :params ({:name "name", :in :path} {:name "verbose", :in :query} {:name "scope", :in :query})}, :NetworkDelete {:summary "Remove a network", :method :delete, :path "/networks/{name}", :params ({:name "name", :in :path})}, :NetworkConnect {:summary "Connect container to network", :method :post, :path "/networks/{name}/connect", :params ({:name "name", :in :path}), :request-body true}, :NetworkDisconnect {:summary "Disconnect container from network", :method :post, :path "/networks/{name}/disconnect", :params ({:name "name", :in :path}), :request-body true}, :NetworkCreate {:summary "Create network", :method :post, :path "/networks/create", :params (), :request-body true}, :NetworkPrune {:summary "Delete unused networks", :method :post, :path "/networks/prune", :params ({:name "filters", :in :query})}}, :build {:ImageBuild {:summary "Create image", :method :post, :path "/build", :params ({:name "Content-Type", :in :header} {:name "X-Registry-Config", :in :header} {:name "dockerfile", :in :query} {:name "t", :in :query} {:name "extrahosts", :in :query} {:name "remote", :in :query} {:name "q", :in :query} {:name "nocache", :in :query} {:name "cachefrom", :in :query} {:name "pull", :in :query} {:name "rm", :in :query} {:name "forcerm", :in :query} {:name "memory", :in :query} {:name "memswap", :in :query} {:name "cpushares", :in :query} {:name "cpusetcpus", :in :query} {:name "cpuperiod", :in :query} {:name "cpuquota", :in :query} {:name "buildargs", :in :query} {:name "shmsize", :in :query} {:name "squash", :in :query} {:name "labels", :in :query} {:name "networkmode", :in :query} {:name "platform", :in :query} {:name "target", :in :query} {:name "outputs", :in :query}), :request-body true}}, :libpod/build {:ImageBuildLibpod {:summary "Create image", :method :post, :path "/libpod/build", :params ({:name "dockerfile", :in :query} {:name "t", :in :query} {:name "allplatforms", :in :query} {:name "extrahosts", :in :query} {:name "remote", :in :query} {:name "q", :in :query} {:name "nocache", :in :query} {:name "cachefrom", :in :query} {:name "pull", :in :query} {:name "rm", :in :query} {:name "forcerm", :in :query} {:name "memory", :in :query} {:name "memswap", :in :query} {:name "cpushares", :in :query} {:name "cpusetcpus", :in :query} {:name "cpuperiod", :in :query} {:name "cpuquota", :in :query} {:name "buildargs", :in :query} {:name "shmsize", :in :query} {:name "squash", :in :query} {:name "labels", :in :query} {:name "layers", :in :query} {:name "networkmode", :in :query} {:name "platform", :in :query} {:name "target", :in :query} {:name "outputs", :in :query} {:name "httpproxy", :in :query} {:name "unsetenv", :in :query} {:name "volume", :in :query})}}, :commit {:ImageCommit {:summary "New Image", :method :post, :path "/commit", :params ({:name "container", :in :query} {:name "repo", :in :query} {:name "tag", :in :query} {:name "comment", :in :query} {:name "author", :in :query} {:name "pause", :in :query} {:name "changes", :in :query} {:name "squash", :in :query})}}, :libpod/commit {:ImageCommitLibpod {:summary "Commit", :method :post, :path "/libpod/commit", :params ({:name "container", :in :query} {:name "repo", :in :query} {:name "tag", :in :query} {:name "comment", :in :query} {:name "author", :in :query} {:name "pause", :in :query} {:name "changes", :in :query} {:name "format", :in :query})}}, :info {:SystemInfo {:summary "Get info", :method :get, :path "/info", :params ()}}, :libpod/info {:SystemInfoLibpod {:summary "Get info", :method :get, :path "/libpod/info", :params ()}}, :libpod/pods {:PodCreateLibpod {:summary "Create a pod", :method :post, :path "/libpod/pods/create", :params (), :request-body true}, :PodStatsAllLibpod {:summary "Statistics for one or more pods", :method :get, :path "/libpod/pods/stats", :params ({:name "all", :in :query} {:name "namesOrIDs", :in :query})}, :PodListLibpod {:summary "List pods", :method :get, :path "/libpod/pods/json", :params ({:name "filters", :in :query})}, :PodPruneLibpod {:summary "Prune unused pods", :method :post, :path "/libpod/pods/prune", :params ()}, :PodPauseLibpod {:summary "Pause a pod", :method :post, :path "/libpod/pods/{name}/pause", :params ({:name "name", :in :path})}, :PodStartLibpod {:summary "Start a pod", :method :post, :path "/libpod/pods/{name}/start", :params ({:name "name", :in :path})}, :PodInspectLibpod {:summary "Inspect pod", :method :get, :path "/libpod/pods/{name}/json", :params ({:name "name", :in :path})}, :PodUnpauseLibpod {:summary "Unpause a pod", :method :post, :path "/libpod/pods/{name}/unpause", :params ({:name "name", :in :path})}, :PodTopLibpod {:summary "List processes", :method :get, :path "/libpod/pods/{name}/top", :params ({:name "name", :in :path} {:name "stream", :in :query} {:name "delay", :in :query} {:name "ps_args", :in :query})}, :PodKillLibpod {:summary "Kill a pod", :method :post, :path "/libpod/pods/{name}/kill", :params ({:name "name", :in :path} {:name "signal", :in :query})}, :PodDeleteLibpod {:summary "Remove pod", :method :delete, :path "/libpod/pods/{name}", :params ({:name "name", :in :path} {:name "force", :in :query})}, :PodRestartLibpod {:summary "Restart a pod", :method :post, :path "/libpod/pods/{name}/restart", :params ({:name "name", :in :path})}, :PodExistsLibpod {:summary "Pod exists", :method :get, :path "/libpod/pods/{name}/exists", :params ({:name "name", :in :path})}, :PodStopLibpod {:summary "Stop a pod", :method :post, :path "/libpod/pods/{name}/stop", :params ({:name "name", :in :path} {:name "t", :in :query})}}, :libpod/play {:PlayKubeLibpod {:summary "Play a Kubernetes YAML file.", :method :post, :path "/libpod/play/kube", :params ({:name "network", :in :query} {:name "tlsVerify", :in :query} {:name "logDriver", :in :query} {:name "start", :in :query} {:name "serviceContainer", :in :query} {:name "staticIPs", :in :query} {:name "staticMACs", :in :query} {:name "wait", :in :query}), :request-body true}, :PlayKubeDownLibpod {:summary "Remove pods from kube play", :method :delete, :path "/libpod/play/kube", :params ({:name "force", :in :query})}}, :libpod/version {:SystemVersionLibpod {:summary "Component Version information", :method :get, :path "/libpod/version", :params ()}}, :version {:SystemVersion {:summary "Component Version information", :method :get, :path "/version", :params ()}}, :contajners/doc-url "https://docs.podman.io/en/%s/_static/api.html#operation/%s"}