{:libpod/system {:df {:summary "Show disk usage", :method :get, :path "/libpod/system/df", :params ()}, :pruneSystem {:summary "Prune unused data", :method :post, :path "/libpod/system/prune", :params ()}}, :libpod/exec {:libpodInspectExec {:summary "Inspect an exec instance", :method :get, :path "/libpod/exec/{id}/json", :params ({:name "id", :in :path})}, :libpodResizeExec {:summary "Resize an exec instance", :method :post, :path "/libpod/exec/{id}/resize", :params ({:name "id", :in :path} {:name "h", :in :query} {:name "w", :in :query})}, :libpodStartExec {:summary "Start an exec instance", :method :post, :path "/libpod/exec/{id}/start", :params ({:name "id", :in :path}), :request-body true}}, :exec {:inspectExec {:summary "Inspect an exec instance", :method :get, :path "/exec/{id}/json", :params ({:name "id", :in :path})}, :resizeExec {:summary "Resize an exec instance", :method :post, :path "/exec/{id}/resize", :params ({:name "id", :in :path} {:name "h", :in :query} {:name "w", :in :query} {:name "running", :in :query})}, :startExec {:summary "Start an exec instance", :method :post, :path "/exec/{id}/start", :params ({:name "id", :in :path}), :request-body true}}, :images {:createImage {:summary "Create an image", :method :post, :path "/images/create", :params ({:name "fromImage", :in :query} {:name "fromSrc", :in :query} {:name "tag", :in :query} {:name "X-Registry-Auth", :in :header}), :request-body true}, :get {:summary "Export several images", :method :get, :path "/images/get", :params ({:name "names", :in :query})}, :importImage {:summary "Import image", :method :post, :path "/images/load", :params ({:name "quiet", :in :query}), :request-body true}, :imageHistory {:summary "History of an image", :method :get, :path "/images/{name:.*}/history", :params ({:name "name:.*", :in :path})}, :pruneImages {:summary "Prune unused images", :method :post, :path "/images/prune", :params ({:name "filters", :in :query})}, :inspectImage {:summary "Inspect an image", :method :get, :path "/images/{name:.*}/json", :params ({:name "name:.*", :in :path})}, :pushImage {:summary "Push Image", :method :post, :path "/images/{name:.*}/push", :params ({:name "name:.*", :in :path} {:name "tag", :in :query} {:name "all", :in :query} {:name "compress", :in :query} {:name "destination", :in :query} {:name "X-Registry-Auth", :in :header})}, :searchImages {:summary "Search images", :method :get, :path "/images/search", :params ({:name "term", :in :query} {:name "limit", :in :query} {:name "filters", :in :query} {:name "listTags", :in :query})}, :tagImage {:summary "Tag an image", :method :post, :path "/images/{name:.*}/tag", :params ({:name "name:.*", :in :path} {:name "repo", :in :query} {:name "tag", :in :query})}, :listImages {:summary "List Images", :method :get, :path "/images/json", :params ({:name "all", :in :query} {:name "filters", :in :query} {:name "digests", :in :query})}, :removeImage {:summary "Remove Image", :method :delete, :path "/images/{name:.*}", :params ({:name "name:.*", :in :path} {:name "force", :in :query} {:name "noprune", :in :query})}, :exportImage {:summary "Export an image", :method :get, :path "/images/{name:.*}/get", :params ({:name "name:.*", :in :path})}}, :libpod/secrets {:libpodRemoveSecret {:summary "Remove secret", :method :delete, :path "/libpod/secrets/{name}", :params ({:name "name", :in :path} {:name "all", :in :query})}, :libpodInspectSecret {:summary "Inspect secret", :method :get, :path "/libpod/secrets/{name}/json", :params ({:name "name", :in :path})}, :libpodCreateSecret {:summary "Create a secret", :method :post, :path "/libpod/secrets/create", :params ({:name "name", :in :query} {:name "driver", :in :query}), :request-body true}, :libpodListSecret {:summary "List secrets", :method :get, :path "/libpod/secrets/json", :params ()}}, :libpod/images {:libpodExportImages {:summary "Export multiple images", :method :get, :path "/libpod/images/export", :params ({:name "format", :in :query} {:name "references", :in :query} {:name "compress", :in :query})}, :libpodPruneImages {:summary "Prune unused images", :method :post, :path "/libpod/images/prune", :params ({:name "filters", :in :query})}, :libpodImageExists {:summary "Image exists", :method :get, :path "/libpod/images/{name:.*}/exists", :params ({:name "name:.*", :in :path})}, :libpodUntagImage {:summary "Untag an image", :method :post, :path "/libpod/images/{name:.*}/untag", :params ({:name "name:.*", :in :path} {:name "repo", :in :query} {:name "tag", :in :query})}, :libpodImagesLoad {:summary "Load image", :method :post, :path "/libpod/images/load", :params (), :request-body true}, :libpodPushImage {:summary "Push Image", :method :post, :path "/libpod/images/{name:.*}/push", :params ({:name "name:.*", :in :path} {:name "destination", :in :query} {:name "tlsVerify", :in :query} {:name "X-Registry-Auth", :in :header})}, :libpodRemoveImage {:summary "Remove an image from the local storage.", :method :delete, :path "/libpod/images/{name:.*}", :params ({:name "name:.*", :in :path} {:name "force", :in :query})}, :libpodImageTree {:summary "Image tree", :method :get, :path "/libpod/images/{name:.*}/tree", :params ({:name "name:.*", :in :path} {:name "whatrequires", :in :query})}, :libpodImageHistory {:summary "History of an image", :method :get, :path "/libpod/images/{name:.*}/history", :params ({:name "name:.*", :in :path})}, :libpodInspectImage {:summary "Inspect an image", :method :get, :path "/libpod/images/{name:.*}/json", :params ({:name "name:.*", :in :path})}, :libpodSearchImages {:summary "Search images", :method :get, :path "/libpod/images/search", :params ({:name "term", :in :query} {:name "limit", :in :query} {:name "noTrunc", :in :query} {:name "filters", :in :query})}, :libpodImagesImport {:summary "Import image", :method :post, :path "/libpod/images/import", :params ({:name "changes", :in :query} {:name "message", :in :query} {:name "reference", :in :query} {:name "url", :in :query}), :request-body true}, :libpodChangesImages {:summary "Report on changes to images's filesystem; adds, deletes or modifications.", :method :get, :path "/libpod/images/{name}/changes", :params ({:name "name", :in :path})}, :libpodTagImage {:summary "Tag an image", :method :post, :path "/libpod/images/{name:.*}/tag", :params ({:name "name:.*", :in :path} {:name "repo", :in :query} {:name "tag", :in :query})}, :libpodImagesRemove {:summary "Remove one or more images from the storage.", :method :delete, :path "/libpod/images/remove", :params ({:name "images", :in :query} {:name "all", :in :query} {:name "force", :in :query})}, :libpodListImages {:summary "List Images", :method :get, :path "/libpod/images/json", :params ({:name "all", :in :query} {:name "filters", :in :query})}, :libpodExportImage {:summary "Export an image", :method :get, :path "/libpod/images/{name:.*}/get", :params ({:name "name:.*", :in :path} {:name "format", :in :query} {:name "compress", :in :query})}, :libpodImagesPull {:summary "Pull images", :method :post, :path "/libpod/images/pull", :params ({:name "reference", :in :query} {:name "credentials", :in :query} {:name "Arch", :in :query} {:name "OS", :in :query} {:name "Variant", :in :query} {:name "tlsVerify", :in :query} {:name "allTags", :in :query})}}, :secrets {:ListSecret {:summary "List secrets", :method :get, :path "/secrets", :params ()}, :InspectSecret {:summary "Inspect secret", :method :get, :path "/secrets/{name}", :params ({:name "name", :in :path})}, :RemoveSecret {:summary "Remove secret", :method :delete, :path "/secrets/{name}", :params ({:name "name", :in :path})}, :CreateSecret {:summary "Create a secret", :method :post, :path "/secrets/create", :params (), :request-body true}}, :events {:getEvents {:summary "Get events", :method :get, :path "/events", :params ({:name "since", :in :query} {:name "until", :in :query} {:name "filters", :in :query})}}, :libpod/events {:libpodGetEvents {:summary "Get events", :method :get, :path "/libpod/events", :params ({:name "since", :in :query} {:name "until", :in :query} {:name "filters", :in :query} {:name "stream", :in :query})}}, :libpod/_ping {:libpodPingGet {:summary "Ping service", :method :get, :path "/libpod/_ping", :params ()}}, :libpod/generate {:libpodGenerateSystemd {:summary "Generate Systemd Units", :method :get, :path "/libpod/generate/{name:.*}/systemd", :params ({:name "name:.*", :in :path} {:name "useName", :in :query} {:name "new", :in :query} {:name "noHeader", :in :query} {:name "time", :in :query} {:name "restartPolicy", :in :query} {:name "containerPrefix", :in :query} {:name "podPrefix", :in :query} {:name "separator", :in :query})}, :libpodGenerateKube {:summary "Generate a Kubernetes YAML file.", :method :get, :path "/libpod/generate/kube", :params ({:name "names", :in :query} {:name "service", :in :query})}}, :libpod/manifests {:RemoveManifest {:summary "Remove", :method :delete, :path "/libpod/manifests/{name:.*}", :params ({:name "name:.*", :in :path} {:name "digest", :in :query})}, :AddManifest {:summary nil, :method :post, :path "/libpod/manifests/{name:.*}/add", :params ({:name "name:.*", :in :path}), :request-body true}, :Inspect {:summary "Inspect", :method :get, :path "/libpod/manifests/{name:.*}/json", :params ({:name "name:.*", :in :path})}, :Exists {:summary "Exists", :method :get, :path "/libpod/manifests/{name}/exists", :params ({:name "name", :in :path})}, :PushManifest {:summary "Push", :method :post, :path "/libpod/manifests/{name}/push", :params ({:name "name", :in :path} {:name "destination", :in :query} {:name "all", :in :query})}, :Create {:summary "Create", :method :post, :path "/libpod/manifests/create", :params ({:name "name", :in :query} {:name "image", :in :query} {:name "all", :in :query})}}, :containers {:statsContainer {:summary "Get stats for a container", :method :get, :path "/containers/{name}/stats", :params ({:name "name", :in :path} {:name "stream", :in :query})}, :getArchive {:summary "Get files from a container", :method :get, :path "/containers/{name}/archive", :params ({:name "name", :in :path} {:name "path", :in :query})}, :createExec {:summary "Create an exec instance", :method :post, :path "/containers/{name}/exec", :params ({:name "name", :in :path}), :request-body true}, :logsFromContainer {:summary "Get container logs", :method :get, :path "/containers/{name}/logs", :params ({:name "name", :in :path} {:name "follow", :in :query} {:name "stdout", :in :query} {:name "stderr", :in :query} {:name "since", :in :query} {:name "until", :in :query} {:name "timestamps", :in :query} {:name "tail", :in :query})}, :restartContainer {:summary "Restart container", :method :post, :path "/containers/{name}/restart", :params ({:name "name", :in :path} {:name "t", :in :query})}, :listContainers {:summary "List containers", :method :get, :path "/containers/json", :params ({:name "all", :in :query} {:name "external", :in :query} {:name "limit", :in :query} {:name "size", :in :query} {:name "filters", :in :query})}, :unpauseContainer {:summary "Unpause container", :method :post, :path "/containers/{name}/unpause", :params ({:name "name", :in :path})}, :stopContainer {:summary "Stop a container", :method :post, :path "/containers/{name}/stop", :params ({:name "name", :in :path} {:name "t", :in :query})}, :pauseContainer {:summary "Pause container", :method :post, :path "/containers/{name}/pause", :params ({:name "name", :in :path})}, :removeContainer {:summary "Remove a container", :method :delete, :path "/containers/{name}", :params ({:name "name", :in :path} {:name "force", :in :query} {:name "v", :in :query} {:name "link", :in :query})}, :pruneContainers {:summary "Delete stopped containers", :method :post, :path "/containers/prune", :params ({:name "filters", :in :query})}, :attachContainer {:summary "Attach to a container", :method :post, :path "/containers/{name}/attach", :params ({:name "name", :in :path} {:name "detachKeys", :in :query} {:name "logs", :in :query} {:name "stream", :in :query} {:name "stdout", :in :query} {:name "stderr", :in :query} {:name "stdin", :in :query})}, :startContainer {:summary "Start a container", :method :post, :path "/containers/{name}/start", :params ({:name "name", :in :path} {:name "detachKeys", :in :query})}, :killContainer {:summary "Kill container", :method :post, :path "/containers/{name}/kill", :params ({:name "name", :in :path} {:name "all", :in :query} {:name "signal", :in :query})}, :exportContainer {:summary "Export a container", :method :get, :path "/containers/{name}/export", :params ({:name "name", :in :path})}, :topContainer {:summary "List processes running inside a container", :method :get, :path "/containers/{name}/top", :params ({:name "name", :in :path} {:name "ps_args", :in :query})}, :resizeContainer {:summary "Resize a container's TTY", :method :post, :path "/containers/{name}/resize", :params ({:name "name", :in :path} {:name "h", :in :query} {:name "w", :in :query} {:name "running", :in :query})}, :renameContainer {:summary "Rename an existing container", :method :post, :path "/containers/{name}/rename", :params ({:name "name", :in :path} {:name "name", :in :query})}, :putArchive {:summary "Put files into a container", :method :put, :path "/containers/{name}/archive", :params ({:name "name", :in :path} {:name "path", :in :query} {:name "noOverwriteDirNonDir", :in :query} {:name "copyUIDGID", :in :query}), :request-body true}, :createContainer {:summary "Create a container", :method :post, :path "/containers/create", :params ({:name "name", :in :query})}, :getContainer {:summary "Inspect container", :method :get, :path "/containers/{name}/json", :params ({:name "name", :in :path} {:name "size", :in :query})}, :waitContainer {:summary "Wait on a container", :method :post, :path "/containers/{name}/wait", :params ({:name "name", :in :path} {:name "condition", :in :query} {:name "interval", :in :query})}}, :libpod/containers {:libpodPutArchive {:summary "Copy files into a container", :method :put, :path "/libpod/containers/{name}/archive", :params ({:name "name", :in :path} {:name "path", :in :query} {:name "pause", :in :query}), :request-body true}, :libpodResizeContainer {:summary "Resize a container's TTY", :method :post, :path "/libpod/containers/{name}/resize", :params ({:name "name", :in :path} {:name "h", :in :query} {:name "w", :in :query})}, :libpodStatsContainers {:summary "Get stats for one or more containers", :method :get, :path "/libpod/containers/stats", :params ({:name "containers", :in :query} {:name "stream", :in :query})}, :libpodRunHealthCheck {:summary "Run a container's healthcheck", :method :get, :path "/libpod/containers/{name:.*}/healthcheck", :params ({:name "name:.*", :in :path})}, :libpodAttachContainer {:summary "Attach to a container", :method :post, :path "/libpod/containers/{name}/attach", :params ({:name "name", :in :path} {:name "detachKeys", :in :query} {:name "logs", :in :query} {:name "stream", :in :query} {:name "stdout", :in :query} {:name "stderr", :in :query} {:name "stdin", :in :query})}, :libpodCheckpointContainer {:summary "Checkpoint a container", :method :post, :path "/libpod/containers/{name}/checkpoint", :params ({:name "name", :in :path} {:name "keep", :in :query} {:name "leaveRunning", :in :query} {:name "tcpEstablished", :in :query} {:name "export", :in :query} {:name "ignoreRootFS", :in :query})}, :libpodPruneContainers {:summary "Delete stopped containers", :method :post, :path "/libpod/containers/prune", :params ({:name "filters", :in :query})}, :libpodRestoreContainer {:summary "Restore a container", :method :post, :path "/libpod/containers/{name}/restore", :params ({:name "name", :in :path} {:name "name", :in :query} {:name "keep", :in :query} {:name "leaveRunning", :in :query} {:name "tcpEstablished", :in :query} {:name "import", :in :query} {:name "ignoreRootFS", :in :query} {:name "ignoreStaticIP", :in :query} {:name "ignoreStaticMAC", :in :query})}, :libpodKillContainer {:summary "Kill container", :method :post, :path "/libpod/containers/{name}/kill", :params ({:name "name", :in :path} {:name "signal", :in :query})}, :libpodListContainers {:summary "List containers", :method :get, :path "/libpod/containers/json", :params ({:name "all", :in :query} {:name "limit", :in :query} {:name "pod", :in :query} {:name "size", :in :query} {:name "sync", :in :query} {:name "filters", :in :query})}, :libpodGetArchive {:summary "Copy files from a container", :method :get, :path "/libpod/containers/{name}/archive", :params ({:name "name", :in :path} {:name "path", :in :query})}, :libpodStartContainer {:summary "Start a container", :method :post, :path "/libpod/containers/{name}/start", :params ({:name "name", :in :path} {:name "detachKeys", :in :query})}, :libpodInitContainer {:summary "Initialize a container", :method :post, :path "/libpod/containers/{name}/init", :params ({:name "name", :in :path})}, :libpodWaitContainer {:summary "Wait on a container", :method :post, :path "/libpod/containers/{name}/wait", :params ({:name "name", :in :path} {:name "condition", :in :query})}, :changesContainer {:summary "Report on changes to container's filesystem; adds, deletes or modifications.", :method :get, :path "/libpod/containers/{name}/changes", :params ({:name "name", :in :path})}, :libpodStatsContainer {:summary "Get stats for a container", :method :get, :path "/libpod/containers/{name}/stats", :params ({:name "name", :in :path} {:name "stream", :in :query})}, :libpodCreateExec {:summary "Create an exec instance", :method :post, :path "/libpod/containers/{name}/exec", :params ({:name "name", :in :path}), :request-body true}, :libpodUnmountContainer {:summary "Unmount a container", :method :post, :path "/libpod/containers/{name}/unmount", :params ({:name "name", :in :path})}, :libpodExportContainer {:summary "Export a container", :method :get, :path "/libpod/containers/{name}/export", :params ({:name "name", :in :path})}, :libpodRenameContainer {:summary "Rename an existing container", :method :post, :path "/libpod/containers/{name}/rename", :params ({:name "name", :in :path} {:name "name", :in :query})}, :libpodRestartContainer {:summary "Restart a container", :method :post, :path "/libpod/containers/{name}/restart", :params ({:name "name", :in :path} {:name "t", :in :query})}, :libpodMountContainer {:summary "Mount a container", :method :post, :path "/libpod/containers/{name}/mount", :params ({:name "name", :in :path})}, :libpodCreateContainer {:summary "Create a container", :method :post, :path "/libpod/containers/create", :params (), :request-body true}, :libpodLogsFromContainer {:summary "Get container logs", :method :get, :path "/libpod/containers/{name}/logs", :params ({:name "name", :in :path} {:name "follow", :in :query} {:name "stdout", :in :query} {:name "stderr", :in :query} {:name "since", :in :query} {:name "until", :in :query} {:name "timestamps", :in :query} {:name "tail", :in :query})}, :libpodContainerExists {:summary "Check if container exists", :method :get, :path "/libpod/containers/{name}/exists", :params ({:name "name", :in :path})}, :libpodGetContainer {:summary "Inspect container", :method :get, :path "/libpod/containers/{name}/json", :params ({:name "name", :in :path} {:name "size", :in :query})}, :libpodStopContainer {:summary "Stop a container", :method :post, :path "/libpod/containers/{name}/stop", :params ({:name "name", :in :path} {:name "all", :in :query} {:name "timeout", :in :query} {:name "Ignore", :in :query})}, :libpodPauseContainer {:summary "Pause a container", :method :post, :path "/libpod/containers/{name}/pause", :params ({:name "name", :in :path})}, :libpodTopContainer {:summary "List processes", :method :get, :path "/libpod/containers/{name}/top", :params ({:name "name", :in :path} {:name "stream", :in :query} {:name "ps_args", :in :query})}, :libpodUnpauseContainer {:summary "Unpause Container", :method :post, :path "/libpod/containers/{name}/unpause", :params ({:name "name", :in :path})}, :libpodRemoveContainer {:summary "Delete container", :method :delete, :path "/libpod/containers/{name}", :params ({:name "name", :in :path} {:name "force", :in :query} {:name "v", :in :query})}, :libpodShowMountedContainers {:summary "Show mounted containers", :method :get, :path "/libpod/containers/showmounted", :params ()}}, :auth {:auth {:summary "Check auth configuration", :method :post, :path "/auth", :params (), :request-body true}}, :volumes {:listVolumes {:summary "List volumes", :method :get, :path "/volumes", :params ({:name "filters", :in :query})}, :inspectVolume {:summary "Inspect volume", :method :get, :path "/volumes/{name}", :params ({:name "name", :in :path})}, :removeVolume {:summary "Remove volume", :method :delete, :path "/volumes/{name}", :params ({:name "name", :in :path} {:name "force", :in :query})}, :createVolume {:summary "Create a volume", :method :post, :path "/volumes/create", :params (), :request-body true}, :pruneVolumes {:summary "Prune volumes", :method :post, :path "/volumes/prune", :params ({:name "filters", :in :query})}}, :libpod/volumes {:libpodRemoveVolume {:summary "Remove volume", :method :delete, :path "/libpod/volumes/{name}", :params ({:name "name", :in :path} {:name "force", :in :query})}, :libpodExistsVolume {:summary "Volume exists", :method :get, :path "/libpod/volumes/{name}/exists", :params ({:name "name", :in :path})}, :libpodInspectVolume {:summary "Inspect volume", :method :get, :path "/libpod/volumes/{name}/json", :params ({:name "name", :in :path})}, :libpodCreateVolume {:summary "Create a volume", :method :post, :path "/libpod/volumes/create", :params (), :request-body true}, :libpodListVolumes {:summary "List volumes", :method :get, :path "/libpod/volumes/json", :params ({:name "filters", :in :query})}, :libpodPruneVolumes {:summary "Prune volumes", :method :post, :path "/libpod/volumes/prune", :params ()}}, :libpod/networks {:libpodRemoveNetwork {:summary "Remove a network", :method :delete, :path "/libpod/networks/{name}", :params ({:name "name", :in :path} {:name "force", :in :query})}, :libpodConnectNetwork {:summary "Connect container to network", :method :post, :path "/libpod/networks/{name}/connect", :params ({:name "name", :in :path}), :request-body true}, :libpodDisconnectNetwork {:summary "Disconnect container from network", :method :post, :path "/libpod/networks/{name}/disconnect", :params ({:name "name", :in :path}), :request-body true}, :libpodExistsNetwork {:summary "Network exists", :method :get, :path "/libpod/networks/{name}/exists", :params ({:name "name", :in :path})}, :libpodInspectNetwork {:summary "Inspect a network", :method :get, :path "/libpod/networks/{name}/json", :params ({:name "name", :in :path})}, :libpodCreateNetwork {:summary "Create network", :method :post, :path "/libpod/networks/create", :params ({:name "name", :in :query}), :request-body true}, :libpodListNetwork {:summary "List networks", :method :get, :path "/libpod/networks/json", :params ({:name "filters", :in :query})}, :libpodPruneNetwork {:summary "Delete unused networks", :method :post, :path "/libpod/networks/prune", :params ({:name "filters", :in :query})}}, :networks {:compatListNetwork {:summary "List networks", :method :get, :path "/networks", :params ({:name "filters", :in :query})}, :compatInspectNetwork {:summary "Inspect a network", :method :get, :path "/networks/{name}", :params ({:name "name", :in :path})}, :compatRemoveNetwork {:summary "Remove a network", :method :delete, :path "/networks/{name}", :params ({:name "name", :in :path})}, :compatConnectNetwork {:summary "Connect container to network", :method :post, :path "/networks/{name}/connect", :params ({:name "name", :in :path}), :request-body true}, :compatDisconnectNetwork {:summary "Disconnect container from network", :method :post, :path "/networks/{name}/disconnect", :params ({:name "name", :in :path}), :request-body true}, :compatCreateNetwork {:summary "Create network", :method :post, :path "/networks/create", :params (), :request-body true}, :compatPruneNetwork {:summary "Delete unused networks", :method :post, :path "/networks/prune", :params ({:name "filters", :in :query})}}, :build {:buildImage {:summary "Create image", :method :post, :path "/build", :params ({:name "dockerfile", :in :query} {:name "t", :in :query} {:name "extrahosts", :in :query} {:name "remote", :in :query} {:name "q", :in :query} {:name "nocache", :in :query} {:name "cachefrom", :in :query} {:name "pull", :in :query} {:name "rm", :in :query} {:name "forcerm", :in :query} {:name "memory", :in :query} {:name "memswap", :in :query} {:name "cpushares", :in :query} {:name "cpusetcpus", :in :query} {:name "cpuperiod", :in :query} {:name "cpuquota", :in :query} {:name "buildargs", :in :query} {:name "shmsize", :in :query} {:name "squash", :in :query} {:name "labels", :in :query} {:name "networkmode", :in :query} {:name "platform", :in :query} {:name "target", :in :query} {:name "outputs", :in :query})}}, :libpod/build {:libpodBuildImage {:summary "Create image", :method :post, :path "/libpod/build", :params ({:name "dockerfile", :in :query} {:name "t", :in :query} {:name "extrahosts", :in :query} {:name "remote", :in :query} {:name "q", :in :query} {:name "nocache", :in :query} {:name "cachefrom", :in :query} {:name "pull", :in :query} {:name "rm", :in :query} {:name "forcerm", :in :query} {:name "memory", :in :query} {:name "memswap", :in :query} {:name "cpushares", :in :query} {:name "cpusetcpus", :in :query} {:name "cpuperiod", :in :query} {:name "cpuquota", :in :query} {:name "buildargs", :in :query} {:name "shmsize", :in :query} {:name "squash", :in :query} {:name "labels", :in :query} {:name "networkmode", :in :query} {:name "platform", :in :query} {:name "target", :in :query} {:name "outputs", :in :query} {:name "httpproxy", :in :query})}}, :commit {:commitContainer {:summary "New Image", :method :post, :path "/commit", :params ({:name "container", :in :query} {:name "repo", :in :query} {:name "tag", :in :query} {:name "comment", :in :query} {:name "author", :in :query} {:name "pause", :in :query} {:name "changes", :in :query})}}, :libpod/commit {:libpodCommitContainer {:summary "Commit", :method :post, :path "/libpod/commit", :params ({:name "container", :in :query} {:name "repo", :in :query} {:name "tag", :in :query} {:name "comment", :in :query} {:name "author", :in :query} {:name "pause", :in :query} {:name "changes", :in :query} {:name "format", :in :query})}}, :info {:getInfo {:summary "Get info", :method :get, :path "/info", :params ()}}, :libpod/info {:libpodGetInfo {:summary "Get info", :method :get, :path "/libpod/info", :params ()}}, :libpod/pods {:statsPod {:summary "Get stats for one or more pods", :method :get, :path "/libpod/pods/stats", :params ({:name "all", :in :query} {:name "namesOrIDs", :in :query})}, :stopPod {:summary "Stop a pod", :method :post, :path "/libpod/pods/{name}/stop", :params ({:name "name", :in :path} {:name "t", :in :query})}, :restartPod {:summary "Restart a pod", :method :post, :path "/libpod/pods/{name}/restart", :params ({:name "name", :in :path})}, :startPod {:summary "Start a pod", :method :post, :path "/libpod/pods/{name}/start", :params ({:name "name", :in :path})}, :pausePod {:summary "Pause a pod", :method :post, :path "/libpod/pods/{name}/pause", :params ({:name "name", :in :path})}, :ListPods {:summary "List pods", :method :get, :path "/libpod/pods/json", :params ({:name "filters", :in :query})}, :unpausePod {:summary "Unpause a pod", :method :post, :path "/libpod/pods/{name}/unpause", :params ({:name "name", :in :path})}, :inspectPod {:summary "Inspect pod", :method :get, :path "/libpod/pods/{name}/json", :params ({:name "name", :in :path})}, :CreatePod {:summary "Create a pod", :method :post, :path "/libpod/pods/create", :params (), :request-body true}, :killPod {:summary "Kill a pod", :method :post, :path "/libpod/pods/{name}/kill", :params ({:name "name", :in :path} {:name "signal", :in :query})}, :topPod {:summary "List processes", :method :get, :path "/libpod/pods/{name}/top", :params ({:name "name", :in :path} {:name "stream", :in :query} {:name "ps_args", :in :query})}, :removePod {:summary "Remove pod", :method :delete, :path "/libpod/pods/{name}", :params ({:name "name", :in :path} {:name "force", :in :query})}, :PrunePods {:summary "Prune unused pods", :method :post, :path "/libpod/pods/prune", :params ()}, :podExists {:summary "Pod exists", :method :get, :path "/libpod/pods/{name}/exists", :params ({:name "name", :in :path})}}, :libpod/play {:libpodPlayKube {:summary "Play a Kubernetes YAML file.", :method :post, :path "/libpod/play/kube", :params ({:name "network", :in :query} {:name "tlsVerify", :in :query} {:name "logDriver", :in :query} {:name "start", :in :query}), :request-body true}}, :libpod/version {:SystemVersion {:summary "Component Version information", :method :get, :path "/libpod/version", :params ()}}, :version {:CompatSystemVersion {:summary "Component Version information", :method :get, :path "/version", :params ()}}, :contajners/doc-url "https://docs.podman.io/en/%s/_static/api.html"}