{:system {:SystemDataUsage {:summary "Get data usage information", :method :get, :path "/system/df", :params ({:name "type", :in :query})}}, :exec {:ExecStart {:summary "Start an exec instance", :method :post, :path "/exec/{id}/start", :params ({:name "id", :in :path}), :request-body true}, :ExecResize {:summary "Resize an exec instance", :method :post, :path "/exec/{id}/resize", :params ({:name "id", :in :path} {:name "h", :in :query} {:name "w", :in :query})}, :ExecInspect {:summary "Inspect an exec instance", :method :get, :path "/exec/{id}/json", :params ({:name "id", :in :path})}}, :images {:ImageList {:summary "List Images", :method :get, :path "/images/json", :params ({:name "all", :in :query} {:name "filters", :in :query} {:name "shared-size", :in :query} {:name "digests", :in :query} {:name "manifests", :in :query})}, :ImageLoad {:summary "Import images", :method :post, :path "/images/load", :params ({:name "quiet", :in :query} {:name "platform", :in :query}), :request-body true}, :ImagePrune {:summary "Delete unused images", :method :post, :path "/images/prune", :params ({:name "filters", :in :query})}, :ImagePush {:summary "Push an image", :method :post, :path "/images/{name}/push", :params ({:name "name", :in :path} {:name "tag", :in :query} {:name "platform", :in :query} {:name "X-Registry-Auth", :in :header})}, :ImageHistory {:summary "Get the history of an image", :method :get, :path "/images/{name}/history", :params ({:name "name", :in :path} {:name "platform", :in :query})}, :ImageDelete {:summary "Remove an image", :method :delete, :path "/images/{name}", :params ({:name "name", :in :path} {:name "force", :in :query} {:name "noprune", :in :query} {:name "platforms", :in :query})}, :ImageCreate {:summary "Create an image", :method :post, :path "/images/create", :params ({:name "fromImage", :in :query} {:name "fromSrc", :in :query} {:name "repo", :in :query} {:name "tag", :in :query} {:name "message", :in :query} {:name "X-Registry-Auth", :in :header} {:name "changes", :in :query} {:name "platform", :in :query}), :request-body true}, :ImageGet {:summary "Export an image", :method :get, :path "/images/{name}/get", :params ({:name "name", :in :path} {:name "platform", :in :query})}, :ImageTag {:summary "Tag an image", :method :post, :path "/images/{name}/tag", :params ({:name "name", :in :path} {:name "repo", :in :query} {:name "tag", :in :query})}, :ImageSearch {:summary "Search images", :method :get, :path "/images/search", :params ({:name "term", :in :query} {:name "limit", :in :query} {:name "filters", :in :query})}, :ImageInspect {:summary "Inspect an image", :method :get, :path "/images/{name}/json", :params ({:name "name", :in :path} {:name "manifests", :in :query})}, :ImageGetAll {:summary "Export several images", :method :get, :path "/images/get", :params ({:name "names", :in :query} {:name "platform", :in :query})}}, :secrets {:SecretList {:summary "List secrets", :method :get, :path "/secrets", :params ({:name "filters", :in :query})}, :SecretCreate {:summary "Create a secret", :method :post, :path "/secrets/create", :params (), :request-body true}, :SecretInspect {:summary "Inspect a secret", :method :get, :path "/secrets/{id}", :params ({:name "id", :in :path})}, :SecretDelete {:summary "Delete a secret", :method :delete, :path "/secrets/{id}", :params ({:name "id", :in :path})}, :SecretUpdate {:summary "Update a Secret", :method :post, :path "/secrets/{id}/update", :params ({:name "id", :in :path} {:name "version", :in :query}), :request-body true}}, :events {:SystemEvents {:summary "Monitor events", :method :get, :path "/events", :params ({:name "since", :in :query} {:name "until", :in :query} {:name "filters", :in :query})}}, :_ping {:SystemPing {:summary "Ping", :method :get, :path "/_ping", :params ()}, :SystemPingHead {:summary "Ping", :method :head, :path "/_ping", :params ()}}, :containers {:ContainerAttach {:summary "Attach to a container", :method :post, :path "/containers/{id}/attach", :params ({:name "id", :in :path} {:name "detachKeys", :in :query} {:name "logs", :in :query} {:name "stream", :in :query} {:name "stdin", :in :query} {:name "stdout", :in :query} {:name "stderr", :in :query})}, :ContainerPrune {:summary "Delete stopped containers", :method :post, :path "/containers/prune", :params ({:name "filters", :in :query})}, :ContainerResize {:summary "Resize a container TTY", :method :post, :path "/containers/{id}/resize", :params ({:name "id", :in :path} {:name "h", :in :query} {:name "w", :in :query})}, :ContainerStart {:summary "Start a container", :method :post, :path "/containers/{id}/start", :params ({:name "id", :in :path} {:name "detachKeys", :in :query})}, :ContainerExport {:summary "Export a container", :method :get, :path "/containers/{id}/export", :params ({:name "id", :in :path})}, :ContainerArchiveInfo {:summary "Get information about files in a container", :method :head, :path "/containers/{id}/archive", :params ({:name "id", :in :path} {:name "path", :in :query})}, :ContainerRename {:summary "Rename a container", :method :post, :path "/containers/{id}/rename", :params ({:name "id", :in :path} {:name "name", :in :query})}, :ContainerStats {:summary "Get container stats based on resource usage", :method :get, :path "/containers/{id}/stats", :params ({:name "id", :in :path} {:name "stream", :in :query} {:name "one-shot", :in :query})}, :ContainerUpdate {:summary "Update a container", :method :post, :path "/containers/{id}/update", :params ({:name "id", :in :path}), :request-body true}, :ContainerExec {:summary "Create an exec instance", :method :post, :path "/containers/{id}/exec", :params ({:name "id", :in :path}), :request-body true}, :ContainerRestart {:summary "Restart a container", :method :post, :path "/containers/{id}/restart", :params ({:name "id", :in :path} {:name "signal", :in :query} {:name "t", :in :query})}, :ContainerArchive {:summary "Get an archive of a filesystem resource in a container", :method :get, :path "/containers/{id}/archive", :params ({:name "id", :in :path} {:name "path", :in :query})}, :ContainerCreate {:summary "Create a container", :method :post, :path "/containers/create", :params ({:name "name", :in :query} {:name "platform", :in :query}), :request-body true}, :ContainerPause {:summary "Pause a container", :method :post, :path "/containers/{id}/pause", :params ({:name "id", :in :path})}, :ContainerKill {:summary "Kill a container", :method :post, :path "/containers/{id}/kill", :params ({:name "id", :in :path} {:name "signal", :in :query})}, :ContainerChanges {:summary "Get changes on a containerâ€™s filesystem", :method :get, :path "/containers/{id}/changes", :params ({:name "id", :in :path})}, :ContainerLogs {:summary "Get container logs", :method :get, :path "/containers/{id}/logs", :params ({:name "id", :in :path} {:name "follow", :in :query} {:name "stdout", :in :query} {:name "stderr", :in :query} {:name "since", :in :query} {:name "until", :in :query} {:name "timestamps", :in :query} {:name "tail", :in :query})}, :ContainerUnpause {:summary "Unpause a container", :method :post, :path "/containers/{id}/unpause", :params ({:name "id", :in :path})}, :ContainerWait {:summary "Wait for a container", :method :post, :path "/containers/{id}/wait", :params ({:name "id", :in :path} {:name "condition", :in :query})}, :ContainerAttachWebsocket {:summary "Attach to a container via a websocket", :method :get, :path "/containers/{id}/attach/ws", :params ({:name "id", :in :path} {:name "detachKeys", :in :query} {:name "logs", :in :query} {:name "stream", :in :query} {:name "stdin", :in :query} {:name "stdout", :in :query} {:name "stderr", :in :query})}, :ContainerStop {:summary "Stop a container", :method :post, :path "/containers/{id}/stop", :params ({:name "id", :in :path} {:name "signal", :in :query} {:name "t", :in :query})}, :ContainerTop {:summary "List processes running inside a container", :method :get, :path "/containers/{id}/top", :params ({:name "id", :in :path} {:name "ps_args", :in :query})}, :PutContainerArchive {:summary "Extract an archive of files or folders to a directory in a container", :method :put, :path "/containers/{id}/archive", :params ({:name "id", :in :path} {:name "path", :in :query} {:name "noOverwriteDirNonDir", :in :query} {:name "copyUIDGID", :in :query}), :request-body true}, :ContainerInspect {:summary "Inspect a container", :method :get, :path "/containers/{id}/json", :params ({:name "id", :in :path} {:name "size", :in :query})}, :ContainerDelete {:summary "Remove a container", :method :delete, :path "/containers/{id}", :params ({:name "id", :in :path} {:name "v", :in :query} {:name "force", :in :query} {:name "link", :in :query})}, :ContainerList {:summary "List containers", :method :get, :path "/containers/json", :params ({:name "all", :in :query} {:name "limit", :in :query} {:name "size", :in :query} {:name "filters", :in :query})}}, :auth {:SystemAuth {:summary "Check auth configuration", :method :post, :path "/auth", :params (), :request-body true}}, :tasks {:TaskList {:summary "List tasks", :method :get, :path "/tasks", :params ({:name "filters", :in :query})}, :TaskInspect {:summary "Inspect a task", :method :get, :path "/tasks/{id}", :params ({:name "id", :in :path})}, :TaskLogs {:summary "Get task logs", :method :get, :path "/tasks/{id}/logs", :params ({:name "id", :in :path} {:name "details", :in :query} {:name "follow", :in :query} {:name "stdout", :in :query} {:name "stderr", :in :query} {:name "since", :in :query} {:name "timestamps", :in :query} {:name "tail", :in :query})}}, :volumes {:VolumeList {:summary "List volumes", :method :get, :path "/volumes", :params ({:name "filters", :in :query})}, :VolumeCreate {:summary "Create a volume", :method :post, :path "/volumes/create", :params (), :request-body true}, :VolumeInspect {:summary "Inspect a volume", :method :get, :path "/volumes/{name}", :params ({:name "name", :in :path})}, :VolumeUpdate {:summary "\"Update a volume. Valid only for Swarm cluster volumes\"\n", :method :put, :path "/volumes/{name}", :params ({:name "name", :in :path} {:name "version", :in :query}), :request-body true}, :VolumeDelete {:summary "Remove a volume", :method :delete, :path "/volumes/{name}", :params ({:name "name", :in :path} {:name "force", :in :query})}, :VolumePrune {:summary "Delete unused volumes", :method :post, :path "/volumes/prune", :params ({:name "filters", :in :query})}}, :networks {:NetworkList {:summary "List networks", :method :get, :path "/networks", :params ({:name "filters", :in :query})}, :NetworkInspect {:summary "Inspect a network", :method :get, :path "/networks/{id}", :params ({:name "id", :in :path} {:name "verbose", :in :query} {:name "scope", :in :query})}, :NetworkDelete {:summary "Remove a network", :method :delete, :path "/networks/{id}", :params ({:name "id", :in :path})}, :NetworkCreate {:summary "Create a network", :method :post, :path "/networks/create", :params (), :request-body true}, :NetworkConnect {:summary "Connect a container to a network", :method :post, :path "/networks/{id}/connect", :params ({:name "id", :in :path}), :request-body true}, :NetworkDisconnect {:summary "Disconnect a container from a network", :method :post, :path "/networks/{id}/disconnect", :params ({:name "id", :in :path}), :request-body true}, :NetworkPrune {:summary "Delete unused networks", :method :post, :path "/networks/prune", :params ({:name "filters", :in :query})}}, :build {:ImageBuild {:summary "Build an image", :method :post, :path "/build", :params ({:name "dockerfile", :in :query} {:name "t", :in :query} {:name "extrahosts", :in :query} {:name "remote", :in :query} {:name "q", :in :query} {:name "nocache", :in :query} {:name "cachefrom", :in :query} {:name "pull", :in :query} {:name "rm", :in :query} {:name "forcerm", :in :query} {:name "memory", :in :query} {:name "memswap", :in :query} {:name "cpushares", :in :query} {:name "cpusetcpus", :in :query} {:name "cpuperiod", :in :query} {:name "cpuquota", :in :query} {:name "buildargs", :in :query} {:name "shmsize", :in :query} {:name "squash", :in :query} {:name "labels", :in :query} {:name "networkmode", :in :query} {:name "Content-type", :in :header} {:name "X-Registry-Config", :in :header} {:name "platform", :in :query} {:name "target", :in :query} {:name "outputs", :in :query} {:name "version", :in :query}), :request-body true}, :BuildPrune {:summary "Delete builder cache", :method :post, :path "/build/prune", :params ({:name "keep-storage", :in :query} {:name "reserved-space", :in :query} {:name "max-used-space", :in :query} {:name "min-free-space", :in :query} {:name "all", :in :query} {:name "filters", :in :query})}}, :nodes {:NodeList {:summary "List nodes", :method :get, :path "/nodes", :params ({:name "filters", :in :query})}, :NodeInspect {:summary "Inspect a node", :method :get, :path "/nodes/{id}", :params ({:name "id", :in :path})}, :NodeDelete {:summary "Delete a node", :method :delete, :path "/nodes/{id}", :params ({:name "id", :in :path} {:name "force", :in :query})}, :NodeUpdate {:summary "Update a node", :method :post, :path "/nodes/{id}/update", :params ({:name "id", :in :path} {:name "version", :in :query}), :request-body true}}, :commit {:ImageCommit {:summary "Create a new image from a container", :method :post, :path "/commit", :params ({:name "container", :in :query} {:name "repo", :in :query} {:name "tag", :in :query} {:name "comment", :in :query} {:name "author", :in :query} {:name "pause", :in :query} {:name "changes", :in :query}), :request-body true}}, :plugins {:PluginDisable {:summary "Disable a plugin", :method :post, :path "/plugins/{name}/disable", :params ({:name "name", :in :path} {:name "force", :in :query})}, :PluginPush {:summary "Push a plugin", :method :post, :path "/plugins/{name}/push", :params ({:name "name", :in :path})}, :PluginEnable {:summary "Enable a plugin", :method :post, :path "/plugins/{name}/enable", :params ({:name "name", :in :path} {:name "timeout", :in :query})}, :PluginSet {:summary "Configure a plugin", :method :post, :path "/plugins/{name}/set", :params ({:name "name", :in :path}), :request-body true}, :GetPluginPrivileges {:summary "Get plugin privileges", :method :get, :path "/plugins/privileges", :params ({:name "remote", :in :query})}, :PluginPull {:summary "Install a plugin", :method :post, :path "/plugins/pull", :params ({:name "remote", :in :query} {:name "name", :in :query} {:name "X-Registry-Auth", :in :header}), :request-body true}, :PluginCreate {:summary "Create a plugin", :method :post, :path "/plugins/create", :params ({:name "name", :in :query}), :request-body true}, :PluginInspect {:summary "Inspect a plugin", :method :get, :path "/plugins/{name}/json", :params ({:name "name", :in :path})}, :PluginUpgrade {:summary "Upgrade a plugin", :method :post, :path "/plugins/{name}/upgrade", :params ({:name "name", :in :path} {:name "remote", :in :query} {:name "X-Registry-Auth", :in :header}), :request-body true}, :PluginList {:summary "List plugins", :method :get, :path "/plugins", :params ({:name "filters", :in :query})}, :PluginDelete {:summary "Remove a plugin", :method :delete, :path "/plugins/{name}", :params ({:name "name", :in :path} {:name "force", :in :query})}}, :info {:SystemInfo {:summary "Get system information", :method :get, :path "/info", :params ()}}, :swarm {:SwarmInspect {:summary "Inspect swarm", :method :get, :path "/swarm", :params ()}, :SwarmInit {:summary "Initialize a new swarm", :method :post, :path "/swarm/init", :params (), :request-body true}, :SwarmJoin {:summary "Join an existing swarm", :method :post, :path "/swarm/join", :params (), :request-body true}, :SwarmLeave {:summary "Leave a swarm", :method :post, :path "/swarm/leave", :params ({:name "force", :in :query})}, :SwarmUpdate {:summary "Update a swarm", :method :post, :path "/swarm/update", :params ({:name "version", :in :query} {:name "rotateWorkerToken", :in :query} {:name "rotateManagerToken", :in :query} {:name "rotateManagerUnlockKey", :in :query}), :request-body true}, :SwarmUnlockkey {:summary "Get the unlock key", :method :get, :path "/swarm/unlockkey", :params ()}, :SwarmUnlock {:summary "Unlock a locked manager", :method :post, :path "/swarm/unlock", :params (), :request-body true}}, :distribution {:DistributionInspect {:summary "Get image information from the registry", :method :get, :path "/distribution/{name}/json", :params ({:name "name", :in :path})}}, :version {:SystemVersion {:summary "Get version", :method :get, :path "/version", :params ()}}, :contajners/doc-url "https://docs.docker.com/reference/api/engine/version/%s", :services {:ServiceList {:summary "List services", :method :get, :path "/services", :params ({:name "filters", :in :query} {:name "status", :in :query})}, :ServiceCreate {:summary "Create a service", :method :post, :path "/services/create", :params ({:name "X-Registry-Auth", :in :header}), :request-body true}, :ServiceInspect {:summary "Inspect a service", :method :get, :path "/services/{id}", :params ({:name "id", :in :path} {:name "insertDefaults", :in :query})}, :ServiceDelete {:summary "Delete a service", :method :delete, :path "/services/{id}", :params ({:name "id", :in :path})}, :ServiceUpdate {:summary "Update a service", :method :post, :path "/services/{id}/update", :params ({:name "id", :in :path} {:name "version", :in :query} {:name "registryAuthFrom", :in :query} {:name "rollback", :in :query} {:name "X-Registry-Auth", :in :header}), :request-body true}, :ServiceLogs {:summary "Get service logs", :method :get, :path "/services/{id}/logs", :params ({:name "id", :in :path} {:name "details", :in :query} {:name "follow", :in :query} {:name "stdout", :in :query} {:name "stderr", :in :query} {:name "since", :in :query} {:name "timestamps", :in :query} {:name "tail", :in :query})}}, :configs {:ConfigList {:summary "List configs", :method :get, :path "/configs", :params ({:name "filters", :in :query})}, :ConfigCreate {:summary "Create a config", :method :post, :path "/configs/create", :params (), :request-body true}, :ConfigInspect {:summary "Inspect a config", :method :get, :path "/configs/{id}", :params ({:name "id", :in :path})}, :ConfigDelete {:summary "Delete a config", :method :delete, :path "/configs/{id}", :params ({:name "id", :in :path})}, :ConfigUpdate {:summary "Update a Config", :method :post, :path "/configs/{id}/update", :params ({:name "id", :in :path} {:name "version", :in :query}), :request-body true}}, :session {:Session {:summary "Initialize interactive session", :method :post, :path "/session", :params ()}}}